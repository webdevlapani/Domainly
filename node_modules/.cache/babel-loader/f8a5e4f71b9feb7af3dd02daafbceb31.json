{"ast":null,"code":"import { GET_DOMAINS_REQUEST, GET_DOMAINS_REQUEST_FAILURE, GET_DOMAINS_REQUEST_SUCCESS } from './domainTypes';\nconst initialState = {\n  loading: false,\n  domains: [],\n  error: ''\n};\n\nconst domainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_DOMAINS_REQUEST:\n      return { ...state,\n        loading: true,\n        error: ''\n      };\n\n    case GET_DOMAINS_REQUEST_SUCCESS:\n      return { ...state,\n        loading: false,\n        domains: action.payload,\n        error: ''\n      };\n\n    case GET_DOMAINS_REQUEST_FAILURE:\n      return { ...state,\n        loading: false,\n        domains: [],\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default domainReducer;","map":{"version":3,"sources":["/home/l7/Documents/Domainly/src/store/Domains/domainReducer.ts"],"names":["GET_DOMAINS_REQUEST","GET_DOMAINS_REQUEST_FAILURE","GET_DOMAINS_REQUEST_SUCCESS","initialState","loading","domains","error","domainReducer","state","action","type","payload"],"mappings":"AACA,SACEA,mBADF,EAEEC,2BAFF,EAGEC,2BAHF,QAIO,eAJP;AAaA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE,KADyB;AAElCC,EAAAA,OAAO,EAAE,EAFyB;AAGlCC,EAAAA,KAAK,EAAE;AAH2B,CAApC;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAA0D;AAC9E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,mBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,OAAO,EAAE,IAFJ;AAGLE,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAKJ,2BAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAHX;AAILL,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAKL,2BAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,OAAO,EAAE,EAHJ;AAILC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAJT,OAAP;;AAMF;AACE,aAAOH,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeD,aAAf","sourcesContent":["import { IAction } from '../IAction';\nimport {\n  GET_DOMAINS_REQUEST,\n  GET_DOMAINS_REQUEST_FAILURE,\n  GET_DOMAINS_REQUEST_SUCCESS,\n} from './domainTypes';\nimport { IDomain } from './IDomain';\n\nexport interface IDomainsState {\n  loading: boolean;\n  domains: IDomain[];\n  error: string;\n}\n\nconst initialState: IDomainsState = {\n  loading: false,\n  domains: [],\n  error: '',\n};\n\nconst domainReducer = (state = initialState, action: IAction): IDomainsState => {\n  switch (action.type) {\n    case GET_DOMAINS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: '',\n      };\n    case GET_DOMAINS_REQUEST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        domains: action.payload,\n        error: '',\n      };\n    case GET_DOMAINS_REQUEST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        domains: [],\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default domainReducer;\n"]},"metadata":{},"sourceType":"module"}